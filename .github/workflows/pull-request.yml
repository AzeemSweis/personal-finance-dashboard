name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
  pull_request_target:
    branches: [ main, develop ]

jobs:
  # Code Quality Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Backend Code Quality Checks
      run: |
        cd backend
        # Run black formatter check
        black --check app tests
        # Run isort import sorting check
        isort --check-only app tests
        # Run flake8 linting
        flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        # Run mypy type checking
        mypy app --ignore-missing-imports

    - name: Run Frontend Code Quality Checks
      run: |
        cd frontend
        # Run ESLint
        npm run lint
        # Run TypeScript type checking
        npm run type-check
        # Run Prettier check
        npm run format:check

    - name: Check for TODO comments
      run: |
        echo "Checking for TODO comments..."
        if grep -r "TODO" backend/app frontend/src --exclude-dir=node_modules --exclude-dir=__pycache__; then
          echo "⚠️  TODO comments found. Consider addressing them before merging."
          exit 1
        fi

    - name: Check for console.log statements
      run: |
        echo "Checking for console.log statements in frontend..."
        if grep -r "console.log" frontend/src --exclude-dir=node_modules; then
          echo "⚠️  console.log statements found. Remove them before merging."
          exit 1
        fi

  # Dependency Security Check
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Check Python dependencies for vulnerabilities
      run: |
        cd backend
        pip install safety
        safety check --json --output safety-report.json || true
        if [ -f safety-report.json ]; then
          echo "Python security vulnerabilities found:"
          cat safety-report.json
        fi

    - name: Check Node.js dependencies for vulnerabilities
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        if [ -f npm-audit-report.json ]; then
          echo "Node.js security vulnerabilities found:"
          cat npm-audit-report.json
        fi

  # Automated Testing
  automated-testing:
    name: Automated Testing
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    - name: Run Backend Tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379
        SECRET_KEY: test-secret-key
        JWT_SECRET_KEY: test-jwt-secret
      run: |
        cd backend
        pytest --cov=app --cov-report=xml --cov-report=term-missing

    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false

    - name: Upload Backend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload Frontend Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Build Verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend image (without pushing)
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        target: production
        push: false
        tags: backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build Frontend image (without pushing)
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        target: runner
        push: false
        tags: frontend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation Check
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for README updates
      run: |
        if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.(py|js|ts|jsx|tsx)$' | wc -l | grep -v '^0$'; then
          if ! git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '(README|docs/)'; then
            echo "⚠️  Code changes detected but no documentation updates found."
            echo "Consider updating README.md or adding relevant documentation."
          fi
        fi

    - name: Check API documentation
      run: |
        if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'api/.*\.py$'; then
          echo "API changes detected. Please ensure API documentation is updated."
        fi

  # Performance Impact Check
  performance-check:
    name: Performance Impact Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for new dependencies
      run: |
        echo "Checking for new dependencies..."
        if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '(requirements\.txt|package\.json)'; then
          echo "⚠️  Dependencies changed. Please review performance impact."
        fi

    - name: Check for database migrations
      run: |
        echo "Checking for database migrations..."
        if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'alembic/versions/'; then
          echo "⚠️  Database migration detected. Please review performance impact."
        fi

  # PR Summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-check, automated-testing, build-verification, documentation-check, performance-check]
    if: always()

    steps:
    - name: Generate PR Summary
      run: |
        echo "## 📋 Pull Request Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Checks Completed:" >> $GITHUB_STEP_SUMMARY
        echo "- Code Quality Analysis: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependency Security Check: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Automated Testing: ${{ needs.automated-testing.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Build Verification: ${{ needs.build-verification.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Documentation Check: ${{ needs.documentation-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Impact Check: ${{ needs.performance-check.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.code-quality.result }}" == "success" && "${{ needs.dependency-check.result }}" == "success" && "${{ needs.automated-testing.result }}" == "success" && "${{ needs.build-verification.result }}" == "success" ]]; then
          echo "🎉 **All checks passed!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some checks failed.** Please review the logs and fix any issues." >> $GITHUB_STEP_SUMMARY
        fi 